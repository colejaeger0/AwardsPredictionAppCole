## This "input" configures a global authorization rule to enable public access to
## all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

enum UserRole {
  ADMIN
  USER
}

enum AwardsBody {
  ACADEMY_AWARDS
  GOLDEN_GLOBES
  CRITICS_CHOICE
  BAFTA
  HCA
  PGA
  SAG
  DGA
  WGA
  ADG
  MAKEUP_GUILD
  CDG
  ASC
  MPSE
}

enum EventType {
    WIN
    NOMINATION
}

enum CategoryType {
    FILM
    PERFORMANCE
    SONG
}

enum CategoryName {
    PICTURE
    DIRECTOR
    ACTOR
    ACTRESS
    SUPPORTING_ACTOR
    SUPPORTING_ACTRESS
    ORIGINAL_SCREENPLAY
    ADAPTED_SCREENPLAY
    SCREENPLAY
    INTERNATIONAL
    ANIMATED
    DOCUMENTARY
    EDITING
    CINEMATOGRAPHY
    PRODUCTION_DESIGN
    COSTUMES
    MAKEUP
    VISUAL_EFFECTS
    SOUND
    SCORE
    SONG
    SHORT_ANIMATED
    SHORT_DOCUMENTARY
    SHORT_LIVE_ACTION
    ENSEMBLE
    COMEDY_PICTURE
    COMEDY_ACTOR
    COMEDY_ACTRESS
    ACTION_PICTURE
    SCIFI_HORROR_PICTURE
    YOUNG_ACTOR
    RISING_STAR
    DEBUT
    FIRST_SCREENPLAY
    BRITISH_PICTURE
    ANIMATED_PERFORMANCE
    BLOCKBUSTER
    ACTING_ACHIEVEMENT
    FEMALE_DIRECTOR
    MALE_DIRECTOR
    INDIE_PICTURE
    BREAKTHROUGH
}

enum CateogrySet {
  ACADEMY_AWARDS_2023,
}

type User @model @auth(rules: [{allow: public}]) {
    id: ID! @primaryKey
    email: String!
    username: String
    name: String
    bio: String
    image: String
    role: UserRole! @default(value: "USER")
    # below lets you retrieve related Relationships records from the source User record
    # under the hood, @hasMany configures a default secondary index on the related table to enable you to query the related model from the source model
    followers: [Relationships] @hasMany(indexName: "byFollowedUser", fields: ["id"])
    following: [Relationships] @hasMany(indexName: "byFollowingUser", fields: ["id"])
}

type Relationships @model @auth(rules: [{ allow: public }]) {
    id: ID! @primaryKey
    followedUserId: ID! @index(
        name: "byFollowedUser", 
        queryField: "queryRelationshipsByFollowedUser",
    )
    followingUserId: ID! @index(
        name: "byFollowingUser", 
        queryField: "queryRelationshipsByFollowingUser",
    )
    followedUser: User! @belongsTo(fields: ["followedUserId"])
    followingUser: User! @belongsTo(fields: ["followingUserId"])
}

type PredictionSet @model @auth(rules: [{ allow: public }]) {
    id: ID! @primaryKey
    userId: ID! 
    eventId: ID!
    categoryId: ID!
    predictions: [Prediction] @hasMany # NOTE: DataStore does not return this field so not using at the moment
}

type Prediction @model @auth(rules: [{ allow: public }]) {
    id: ID! @primaryKey
    userId: ID!
    predictionSetId: ID!
    contenderId: ID!
    contender: Contender! @belongsTo(fields: ["contenderId"])
    ranking: Int!
}

type Event @model @auth(rules: [{ allow: public }]) {
    id: ID! @primaryKey
    categories: [Category] @hasMany # Retrieve categories on an event record
    awardsBody: AwardsBody!
    year: Int!
    type: EventType!
    expiration: AWSDateTime
    isActive: String @default(value: "x") # essentially boolean
}

type Category @model @auth(rules: [{ allow: public }]) {
    id: ID! @primaryKey
    name: CategoryName!
    type: CategoryType! @default(value: "FILM")
    eventId: ID!
    event: Event! @belongsTo(fields: ["eventId"]) # Lets you retrieve info about the event from a Category record
    contenders: [Contender] @hasMany
}

# Belongs to a particular category
type Contender @model @auth(rules: [{ allow: public }]) {
    id: ID! @primaryKey
    categoryId: ID!
    category: Category! @belongsTo(fields: ["categoryId"]) # belongsTo is for bi-directional relationships. Category also hasMany contenders
    movie: Movie! @hasOne
    person: Person @hasOne # optional - only applies to acting categories
    song: Song @hasOne # optional - only applies to the song category
    predictions: [Prediction] @hasMany
    didReceiveNominationOrWin: Boolean
    # Stats for displaying leaderboard (must update manually when we change predictions)
    numberOfUsersPredictingWin: Int!
    numberOfUsersPredictingNom: Int!
    numberOfUsersPredictingUnranked: Int!
}

type Movie @model @auth(rules: [{ allow: public }]) {
    id: ID! @primaryKey
    tmdbId: Int! # unique value
    studio: String # distribution studio
}

type Person @model @auth(rules: [{ allow: public }]) {
    id: ID! @primaryKey
    tmdbId: Int! # unique value
}
  
type Song @model @auth(rules: [{ allow: public }]) {
    id: ID! @primaryKey
    title: String!
    artist: String!
    movie: Movie! @hasOne
}
